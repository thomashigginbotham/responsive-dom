{"version":3,"sources":["jquery.responsive-dom.js"],"names":["factory","define","amd","jQuery","$","fn","responsiveDom","options","settings","extend","appendTo","prependTo","mediaQuery","callback","sourceEl","this","placeholder","isMoved","init","updateDom","window","on","debounce","matchMedia","matches","moveElement","revertElement","document","contains","after","eq","append","prepend","remove","func","wait","timeout","clearTimeout","setTimeout"],"mappings":"CAIC,SAASA,GACN,YAEsB,mBAAXC,SAAyBA,OAAOC,IACvCD,QAAQ,UAAWD,GAEnBA,EAAQG,SAEd,SAASC,GACP,YAEAA,GAAEC,GAAGC,cAAgB,SAAUC,GAG3B,GAAIC,GAAWJ,EAAEK,QACbC,SAAU,KACVC,UAAW,KACXC,WAAY,iBACZC,SAAU,MACXN,GAECO,EAAWC,KACXC,EAAc,KACdC,GAAU,EAKVC,EAAO,WAEPC,IAGAf,EAAEgB,QAAQC,GAAG,uBAAwBC,EAASH,EAAW,OAMzDA,EAAY,WAEZ,IAAKF,GAAWM,WAAWf,EAASI,YAAYY,QAC5CC,IACAR,GAAU,MACP,CAAA,IAAIA,GAAYM,WAAWf,EAASI,YAAYY,QAInD,MAHAE,KACAT,GAAU,EAMmB,kBAAtBT,GAASK,UAChBL,EAASK,SAASI,IAQtBQ,EAAc,WAETE,SAASC,WAAYD,SAASC,SAASd,EAAS,MAEjDE,EAAcZ,EAAE,iDAChBU,EAASe,MAAMb,GAIU,OAAtBR,EAASE,SAGRN,EAAEI,EAASE,UAAUoB,GAAG,GAAGC,OAAOjB,GAIlCV,EAAEI,EAASG,WAAWmB,GAAG,GAAGE,QAAQlB,KAU5CY,EAAgB,WAEI,OAAhBV,GAA0BW,SAASC,WAAYD,SAASC,SAASZ,EAAY,MAE7EA,EAAYa,MAAMf,GAElBE,EAAYiB,SACZjB,EAAc,OAWlBM,EAAW,SAASY,EAAMC,GAC1B,GAAIC,EAEJ,OAAO,YACHC,aAAaD,GAEbA,EAAUE,WAAW,WACjBJ,KACDC,IAQX,OAHAjB,KAGOH","file":"jquery.responsive-dom.min.js","sourcesContent":["/**\n * A jQuery plugin to move elements in the DOM based on media queries\n * @param options\n */\n(function(factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else {\n        factory(jQuery);\n    }\n}(function($) {\n    'use strict';\n\n    $.fn.responsiveDom = function (options) {\n        // The settings object provides default settings.\n        // The options argument can override them.\n        var settings = $.extend({\n            appendTo: null,             // The provided object will be moved here...\n            prependTo: null,\n            mediaQuery: '(min-width: 0)', // ...when this media query is true.\n            callback: null                // If provided, the callback will run after DOM updates.\n        }, options);\n\n        var sourceEl = this;\n        var placeholder = null;\n        var isMoved = false;\n\n        /**\n         * Initializes the plugin\n         */\n        var init = function() {\n            // Update the DOM now...\n            updateDom();\n\n            // ...and again when the window resizes\n            $(window).on('resize.responsiveDom', debounce(updateDom, 100));\n        };\n\n        /**\n         * Moves or reverts element DOM position if the media query conditions are met\n         */\n        var updateDom = function() {\n            // Check if media query conditions are met\n            if (!isMoved && matchMedia(settings.mediaQuery).matches) {\n                moveElement();\n                isMoved = true;\n            } else if (isMoved && !matchMedia(settings.mediaQuery).matches) {\n                revertElement();\n                isMoved = false;\n            } else {\n                return;\n            }\n\n            // Run callback function if provided\n            if (typeof settings.callback === 'function') {\n                settings.callback(isMoved);\n            }\n        };\n\n        /**\n         * Creates a placeholder at the element's current DOM position and moves the\n         * element to its new position\n         */\n        var moveElement = function() {\n            // Verify the source element still exists in the DOM\n            if (!document.contains || document.contains(sourceEl[0])) {\n                // Create placeholder so we can move it back if needed\n                placeholder = $('<span class=\"js-responsive-dom-placeholder\"/>');\n                sourceEl.after(placeholder);\n\n                // Check if Append or Prepend\n\n                if(settings.appendTo !== null) {\n\n                    // Move element\n                    $(settings.appendTo).eq(0).append(sourceEl);\n                } else {\n\n                    // Move element\n                    $(settings.prependTo).eq(0).prepend(sourceEl);\n                }\n\n            }\n        };\n\n        /**\n         * Returns element to its previous position in the DOM and removes the\n         * placeholder element\n         */\n        var revertElement = function() {\n            // Verify the placeholder still exists in the DOM\n            if (placeholder !== null && (!document.contains || document.contains(placeholder[0]))) {\n                // Move element back and remove placeholder\n                placeholder.after(sourceEl);\n\n                placeholder.remove();\n                placeholder = null;\n            }\n        };\n\n        /**\n         * Returns a function that cannot be called in succession unless a specified\n         * amount of time has passed\n         * @param func - The function to debounce\n         * @param wait - The wait time (ms) before running the function again\n         * @returns The debounced function\n         */\n        var debounce = function(func, wait) {\n            var timeout;\n\n            return function() {\n                clearTimeout(timeout);\n\n                timeout = setTimeout(function() {\n                    func();\n                }, wait);\n            };\n        };\n\n        // Let's go!\n        init();\n\n        // Always return the target object to allow chaining.\n        return this;\n    };\n}));"]}